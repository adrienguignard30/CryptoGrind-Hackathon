import { validChains } from '@abstract-foundation/agw-client';
import { PrivyProvider, } from '@privy-io/react-auth';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import React from 'react';
import {} from 'viem';
import { createConfig, http, WagmiProvider } from 'wagmi';
import { AGW_APP_ID } from '../constants.js';
import { InjectWagmiConnector } from './injectWagmiConnector.js';
export const agwAppLoginMethod = `privy:${AGW_APP_ID}`;
export const AbstractPrivyProvider = ({ chain, transport, queryClient = new QueryClient(), ...props }) => {
    if (!validChains[chain.id]) {
        throw new Error(`Chain ${chain.id} is not supported`);
    }
    const wagmiConfig = createConfig({
        chains: [chain],
        ssr: true,
        connectors: [],
        transports: {
            [chain.id]: transport ?? http(),
        },
        multiInjectedProviderDiscovery: false,
    });
    // if no login methods and order are provided, set the default login method to the privy app login method
    if (!props.config) {
        props.config = {
            loginMethodsAndOrder: {
                primary: [agwAppLoginMethod],
            },
        };
    }
    else if (!props.config.loginMethodsAndOrder) {
        props.config.loginMethodsAndOrder = {
            primary: [agwAppLoginMethod],
        };
    }
    return (React.createElement(PrivyProvider, { ...props },
        React.createElement(WagmiProvider, { config: wagmiConfig },
            React.createElement(QueryClientProvider, { client: queryClient },
                React.createElement(InjectWagmiConnector, { chain: chain, transport: transport }, props.children)))));
};
//# sourceMappingURL=abstractPrivyProvider.js.map