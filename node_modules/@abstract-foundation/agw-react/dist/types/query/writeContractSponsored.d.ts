import type { MutateOptions } from '@tanstack/query-core';
import type { Abi, Address, ContractFunctionArgs, ContractFunctionName, Hex, WriteContractErrorType } from 'viem';
import { type Config } from 'wagmi';
import { type WriteContractData, type WriteContractVariables } from 'wagmi/query';
export declare function writeContractSponsoredMutationOptions<config extends Config>(config: config): {
    readonly mutationFn: (variables: WriteContractSponsoredVariables<Abi, string, readonly unknown[], config, config["chains"][number]["id"], string>) => Promise<`0x${string}`>;
    readonly mutationKey: readonly ["writeContract"];
};
export type WriteContractSponsoredVariables<abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>, args extends ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>, config extends Config, chainId extends config['chains'][number]['id'], allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>> = WriteContractVariables<abi, functionName, args, config, chainId, allFunctionNames> & {
    paymaster: Address;
    paymasterInput: Hex;
};
export type WriteContractSponsoredMutate<config extends Config, context = unknown> = <const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>, args extends ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>, chainId extends config['chains'][number]['id']>(variables: WriteContractSponsoredVariables<abi, functionName, args, config, chainId>, options?: MutateOptions<WriteContractData, WriteContractErrorType, WriteContractSponsoredVariables<abi, functionName, args, config, chainId, functionName> & {
    paymaster: Address;
    paymasterInput: Hex;
}, context> | undefined) => void;
export type WriteContractSponsoredMutateAsync<config extends Config, context = unknown> = <const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>, args extends ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>, chainId extends config['chains'][number]['id']>(variables: WriteContractSponsoredVariables<abi, functionName, args, config, chainId>, options?: MutateOptions<WriteContractData, WriteContractErrorType, WriteContractSponsoredVariables<Abi, string, readonly unknown[], config, config['chains'][number]['id']>, context> | undefined) => Promise<WriteContractData>;
//# sourceMappingURL=writeContractSponsored.d.ts.map