import type { Abi, WriteContractErrorType } from 'viem';
import { type Config, type ResolvedRegister } from 'wagmi';
import type { ConfigParameter } from 'wagmi/dist/types/types/properties';
import { type UseMutationParameters, type UseMutationReturnType, type WriteContractData } from 'wagmi/query';
import { type WriteContractSponsoredMutate, type WriteContractSponsoredMutateAsync, type WriteContractSponsoredVariables } from '../query/writeContractSponsored.js';
export type UseWriteContractSponsoredParameters<config extends Config = Config, context = unknown> = ConfigParameter<config> & {
    mutation?: UseMutationParameters<WriteContractData, WriteContractErrorType, WriteContractSponsoredVariables<Abi, string, readonly unknown[], config, config['chains'][number]['id']>, context> | undefined;
};
export type UseWriteContractSponsoredReturnType<config extends Config = Config, context = unknown> = UseMutationReturnType<WriteContractData, WriteContractErrorType, WriteContractSponsoredVariables<Abi, string, readonly unknown[], config, config['chains'][number]['id']>, context> & {
    writeContractSponsored: WriteContractSponsoredMutate<config, context>;
    writeContractSponsoredAsync: WriteContractSponsoredMutateAsync<config, context>;
};
export declare function useWriteContractSponsored<config extends Config = ResolvedRegister['config'], context = unknown>(parameters?: UseWriteContractSponsoredParameters<config, context>): UseWriteContractSponsoredReturnType<config, context>;
//# sourceMappingURL=useWriteContractSponsored.d.ts.map