import { type SessionConfig } from '@abstract-foundation/agw-client/sessions';
import type { Config, ResolvedRegister, WriteContractErrorType, WriteContractParameters } from '@wagmi/core';
import { type Address, type Hex } from 'viem';
import type { ConfigParameter } from 'wagmi/dist/types/types/properties.js';
import type { UseMutationParameters, UseMutationReturnType } from 'wagmi/query';
import { type CreateSessionData, type CreateSessionMutate, type CreateSessionMutateAsync, type CreateSessionVariables } from '../query/createSession.js';
export type CreateSessionArgs = {
    session: SessionConfig;
    paymaster?: Address;
    paymasterData?: Hex;
} & Omit<WriteContractParameters, 'address' | 'abi' | 'functionName' | 'args'>;
export type UseCreateSessionParameters<config extends Config = Config, context = unknown> = ConfigParameter<config> & {
    mutation?: UseMutationParameters<CreateSessionData, WriteContractErrorType, CreateSessionVariables<config, config['chains'][number]['id']>, context> | undefined;
};
export type UseCreateSessionReturnType<config extends Config = Config, context = unknown> = UseMutationReturnType<CreateSessionData, WriteContractErrorType, CreateSessionVariables<config, config['chains'][number]['id']>, context> & {
    createSession: CreateSessionMutate<config, context>;
    createSessionAsync: CreateSessionMutateAsync<config, context>;
};
export declare function useCreateSession<config extends Config = ResolvedRegister['config'], context = unknown>(parameters?: UseCreateSessionParameters<config, context>): UseCreateSessionReturnType<config, context>;
//# sourceMappingURL=useCreateSession.d.ts.map