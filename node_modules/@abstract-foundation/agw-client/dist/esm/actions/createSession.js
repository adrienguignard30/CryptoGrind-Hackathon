import { concatHex, } from 'viem';
import { readContract, writeContract } from 'viem/actions';
import { getAction } from 'viem/utils';
import AGWAccountAbi from '../abis/AGWAccount.js';
import { SessionKeyValidatorAbi } from '../abis/SessionKeyValidator.js';
import { SESSION_KEY_VALIDATOR_ADDRESS } from '../constants.js';
import { encodeSession } from '../sessions.js';
import { isSmartAccountDeployed } from '../utils.js';
export async function createSession(client, publicClient, args) {
    const { session, ...rest } = args;
    const isDeployed = await isSmartAccountDeployed(publicClient, client.account.address);
    const hasModule = isDeployed ? await hasSessionModule(client) : false;
    let transactionHash = undefined;
    if (!hasModule) {
        const encodedSession = encodeSession(session);
        transactionHash = await getAction(client, writeContract, 'writeContract')({
            address: client.account.address,
            abi: AGWAccountAbi,
            functionName: 'addModule',
            args: [concatHex([SESSION_KEY_VALIDATOR_ADDRESS, encodedSession])],
            ...rest,
        });
    }
    else {
        transactionHash = await getAction(client, writeContract, 'writeContract')({
            address: SESSION_KEY_VALIDATOR_ADDRESS,
            abi: SessionKeyValidatorAbi,
            functionName: 'createSession',
            args: [session],
            ...rest,
        });
    }
    return { transactionHash, session };
}
async function hasSessionModule(client) {
    const validationHooks = await getAction(client, readContract, 'readContract')({
        address: client.account.address,
        abi: AGWAccountAbi,
        functionName: 'listHooks',
        args: [true],
    });
    const hasSessionModule = validationHooks.some((hook) => hook === SESSION_KEY_VALIDATOR_ADDRESS);
    return hasSessionModule;
}
//# sourceMappingURL=createSession.js.map