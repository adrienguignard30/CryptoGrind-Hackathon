import { encodeFunctionData, } from 'viem';
import {} from 'viem/zksync';
import AGWAccountAbi from '../abis/AGWAccount.js';
import { EOA_VALIDATOR_ADDRESS } from '../constants.js';
import {} from '../types/call.js';
import { sendPrivyTransaction } from './sendPrivyTransaction.js';
import { sendTransactionInternal } from './sendTransactionInternal.js';
export function getBatchTransactionObject(address, parameters) {
    const { calls, paymaster, paymasterInput } = parameters;
    const batchCalls = calls.map((tx) => {
        if (!tx.to)
            throw new Error('Transaction target (to) is required');
        return {
            target: tx.to,
            allowFailure: false,
            value: BigInt(tx.value ?? 0),
            callData: tx.data ?? '0x',
        };
    });
    const batchCallData = encodeFunctionData({
        abi: AGWAccountAbi,
        functionName: 'batchCall',
        args: [batchCalls],
    });
    // Get cumulative value passed in
    const totalValue = batchCalls.reduce((sum, call) => sum + BigInt(call.value), BigInt(0));
    const batchTransaction = {
        to: address,
        data: batchCallData,
        value: totalValue,
        paymaster: paymaster,
        paymasterInput: paymasterInput,
        type: 'eip712',
    };
    return batchTransaction;
}
export async function sendTransactionBatch(client, signerClient, publicClient, parameters, isPrivyCrossApp = false, customPaymasterHandler = undefined) {
    const { calls, ...rest } = parameters;
    if (calls.length === 0) {
        throw new Error('No calls provided');
    }
    if (isPrivyCrossApp) {
        return await sendPrivyTransaction(client, parameters);
    }
    const batchTransaction = getBatchTransactionObject(client.account.address, parameters);
    return sendTransactionInternal(client, signerClient, publicClient, {
        ...batchTransaction,
        ...rest,
    }, EOA_VALIDATOR_ADDRESS, {}, customPaymasterHandler);
}
//# sourceMappingURL=sendTransactionBatch.js.map