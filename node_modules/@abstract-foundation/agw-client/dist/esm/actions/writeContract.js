import { BaseError, encodeFunctionData, } from 'viem';
import { getContractError, parseAccount } from 'viem/utils';
import {} from 'viem/zksync';
import { AccountNotFoundError } from '../errors/account.js';
import { sendTransaction } from './sendTransaction.js';
export async function writeContract(client, signerClient, publicClient, parameters, isPrivyCrossApp = false) {
    const { abi, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;
    if (!account_)
        throw new AccountNotFoundError({
            docsPath: '/docs/contract/writeContract',
        });
    const account = parseAccount(account_);
    const data = encodeFunctionData({
        abi,
        args,
        functionName,
    });
    try {
        return await sendTransaction(client, signerClient, publicClient, {
            data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,
            to: address,
            account,
            ...request,
        }, isPrivyCrossApp);
    }
    catch (error) {
        throw getContractError(error, {
            abi,
            address,
            args,
            docsPath: '/docs/contract/writeContract',
            functionName,
            sender: account.address,
        });
    }
}
//# sourceMappingURL=writeContract.js.map