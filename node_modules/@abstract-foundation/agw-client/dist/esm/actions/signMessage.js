import { bytesToString, fromHex, hashMessage, } from 'viem';
import { getAgwTypedSignature } from '../getAgwTypedSignature.js';
import { sendPrivySignMessage } from './sendPrivyTransaction.js';
export async function signMessage(client, signerClient, parameters, isPrivyCrossApp = false) {
    if (isPrivyCrossApp) {
        // We handle {message: {raw}} here because the message is expected to be a string
        if (typeof parameters.message === 'object') {
            if (parameters.message.raw instanceof Uint8Array) {
                parameters.message = bytesToString(parameters.message.raw);
            }
            else {
                parameters.message = fromHex(parameters.message.raw, 'string');
            }
        }
        return await sendPrivySignMessage(client, parameters);
    }
    return await getAgwTypedSignature({
        client,
        signer: signerClient,
        messageHash: hashMessage(parameters.message),
    });
}
//# sourceMappingURL=signMessage.js.map