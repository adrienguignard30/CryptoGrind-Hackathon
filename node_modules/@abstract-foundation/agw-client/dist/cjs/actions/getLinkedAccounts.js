"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLinkedAccounts = getLinkedAccounts;
exports.isLinkedAccount = isLinkedAccount;
const viem_1 = require("viem");
const actions_1 = require("viem/actions");
const utils_1 = require("viem/utils");
const ExclusiveDelegateResolver_js_1 = require("../abis/ExclusiveDelegateResolver.js");
const constants_js_1 = require("../constants.js");
const account_js_1 = require("../errors/account.js");
async function getLinkedAccounts(client, parameters) {
    const { agwAddress } = parameters;
    if (!(0, viem_1.isAddress)(agwAddress, { strict: false })) {
        throw new viem_1.InvalidAddressError({ address: agwAddress });
    }
    const checksummedAddress = (0, viem_1.getAddress)(agwAddress);
    const result = await (0, utils_1.getAction)(client, actions_1.readContract, 'readContract')({
        abi: ExclusiveDelegateResolver_js_1.ExclusiveDelegateResolverAbi,
        address: constants_js_1.CANONICAL_EXCLUSIVE_DELEGATE_RESOLVER_ADDRESS,
        functionName: 'delegatedWalletsByRights',
        args: [checksummedAddress, constants_js_1.AGW_LINK_DELEGATION_RIGHTS],
    });
    return {
        linkedAccounts: [...result],
    };
}
async function isLinkedAccount(client, parameters) {
    const { address } = parameters;
    if (!client.account) {
        throw new account_js_1.AccountNotFoundError({
            docsPath: '/docs/contract/readContract',
        });
    }
    const clientAccount = (0, utils_1.parseAccount)(client.account);
    const { linkedAccounts } = await getLinkedAccounts(client, {
        agwAddress: clientAccount.address,
    });
    return linkedAccounts.includes((0, viem_1.checksumAddress)(address));
}
//# sourceMappingURL=getLinkedAccounts.js.map