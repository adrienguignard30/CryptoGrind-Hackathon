"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAgwTypedSignature = getAgwTypedSignature;
const viem_1 = require("viem");
const actions_1 = require("viem/actions");
const AccountFactory_js_1 = require("./abis/AccountFactory.js");
const constants_js_1 = require("./constants.js");
const utils_js_1 = require("./utils.js");
async function getAgwTypedSignature(args) {
    const { client, signer, messageHash } = args;
    const chainId = client.chain.id;
    const account = client.account;
    const rawSignature = await (0, actions_1.signTypedData)(signer, {
        domain: {
            name: 'AbstractGlobalWallet',
            version: '1.0.0',
            chainId: BigInt(chainId),
            verifyingContract: account.address,
        },
        types: {
            EIP712Domain: [
                { name: 'name', type: 'string' },
                { name: 'version', type: 'string' },
                { name: 'chainId', type: 'uint256' },
                { name: 'verifyingContract', type: 'address' },
            ],
            AGWMessage: [{ name: 'signedHash', type: 'bytes32' }],
        },
        message: {
            signedHash: messageHash,
        },
        primaryType: 'AGWMessage',
    });
    const signature = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)(['bytes', 'address']), [rawSignature, constants_js_1.EOA_VALIDATOR_ADDRESS]);
    const code = await (0, actions_1.getCode)(client, {
        address: account.address,
    });
    if (code !== undefined) {
        return signature;
    }
    const addressBytes = (0, viem_1.toBytes)(signer.account.address);
    const salt = (0, viem_1.keccak256)(addressBytes);
    return (0, viem_1.serializeErc6492Signature)({
        address: constants_js_1.SMART_ACCOUNT_FACTORY_ADDRESS,
        data: (0, viem_1.encodeFunctionData)({
            abi: AccountFactory_js_1.default,
            functionName: 'deployAccount',
            args: [
                salt,
                (0, utils_js_1.getInitializerCalldata)(signer.account.address, constants_js_1.EOA_VALIDATOR_ADDRESS, {
                    target: viem_1.zeroAddress,
                    allowFailure: false,
                    callData: '0x',
                    value: 0n,
                }),
            ],
        }),
        signature,
    });
}
//# sourceMappingURL=getAgwTypedSignature.js.map