import { type Account, type Address, type Client, type Hex, type PublicClient, type Transport, type UnionRequiredBy, type WalletClient } from 'viem';
import { type ChainEIP712, type SignEip712TransactionParameters, type SignEip712TransactionReturnType, type TransactionRequestEIP712 } from 'viem/zksync';
import type { CustomPaymasterHandler } from '../types/customPaymaster.js';
export declare function signTransaction<chain extends ChainEIP712 | undefined = ChainEIP712 | undefined, account extends Account | undefined = Account | undefined, chainOverride extends ChainEIP712 | undefined = ChainEIP712 | undefined>(client: Client<Transport, ChainEIP712, Account>, signerClient: WalletClient<Transport, ChainEIP712, Account>, publicClient: PublicClient<Transport, ChainEIP712>, args: SignEip712TransactionParameters<chain, account, chainOverride>, validator: Address, validationHookData?: Record<string, Hex>, customPaymasterHandler?: CustomPaymasterHandler | undefined, isPrivyCrossApp?: boolean): Promise<SignEip712TransactionReturnType>;
export declare function signEip712TransactionInternal<chain extends ChainEIP712 | undefined = ChainEIP712 | undefined, account extends Account | undefined = Account | undefined, chainOverride extends ChainEIP712 | undefined = ChainEIP712 | undefined>(client: Client<Transport, ChainEIP712, Account>, signerClient: WalletClient<Transport, ChainEIP712, Account>, publicClient: PublicClient<Transport, ChainEIP712>, args: SignEip712TransactionParameters<chain, account, chainOverride>, validator: Address, validationHookData?: Record<string, Hex>, customPaymasterHandler?: CustomPaymasterHandler | undefined): Promise<{
    transaction: UnionRequiredBy<TransactionRequestEIP712, 'from'> & {
        chainId: number;
    };
    customSignature: Hex;
}>;
//# sourceMappingURL=signTransaction.d.ts.map