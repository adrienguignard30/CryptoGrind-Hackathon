"use strict";var t=require("zod"),e=require("@privy-io/api-base"),a=require("../api.js"),i=require("../core.js"),r=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const o=t.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let n=t.z.object({address:i.SolanaWalletAddress.optional(),chain_type:t.z.literal("solana").optional()}),s=t.z.object({address:i.WalletAddress.optional(),chain_type:t.z.literal("ethereum").optional()});const l=t.z.enum(["root","manager","delegated-actions"]).nullable(),p=t.z.object({method:t.z.literal("signTransaction"),params:t.z.object({transaction:t.z.string(),encoding:t.z.literal("base64")})}).merge(n),c=t.z.object({method:t.z.literal("signAndSendTransaction"),caip2:o,params:t.z.object({transaction:t.z.string(),encoding:t.z.literal("base64")})}).merge(n),z=t.z.object({method:t.z.literal("signMessage"),params:t.z.object({message:t.z.string(),encoding:t.z.literal("base64")})}).merge(n),d=t.z.string().startsWith("0x").refine((t=>!t.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),g=t.z.custom((t=>"string"==typeof t&&t.startsWith("0x")));let h=t.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const u=t.z.union([d,h],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),m=t.z.object({from:i.WalletAddress.optional(),to:i.WalletAddress.optional(),chain_id:u.optional(),nonce:u.optional(),data:d.optional(),value:u.optional(),type:t.z.union([t.z.literal(0),t.z.literal(1),t.z.literal(2)]).optional(),gas_limit:u.optional(),gas_price:u.optional(),max_fee_per_gas:u.optional(),max_priority_fee_per_gas:u.optional()}),_=t.z.object({method:t.z.literal("eth_signTransaction"),params:t.z.object({transaction:m})}).merge(s),b=t.z.object({method:t.z.literal("eth_sendTransaction"),caip2:o,params:t.z.object({transaction:m})}).merge(s),y=t.z.object({message:t.z.string(),encoding:t.z.union([t.z.literal("utf-8"),t.z.literal("hex")])}),x=t.z.object({method:t.z.literal("personal_sign"),params:y}).merge(s),j=t.z.object({method:t.z.literal("secp256k1_sign"),params:t.z.object({hash:g})}).merge(s),A=t.z.record(t.z.string(),t.z.any()),I=t.z.object({name:t.z.string(),version:t.z.string(),chainId:t.z.number(),verifyingContract:t.z.string()}).merge(t.z.object({}).catchall(t.z.any())),S=t.z.union([I,A]),W=t.z.record(t.z.array(t.z.object({name:t.z.string(),type:t.z.string()}))),R=t.z.object({method:t.z.literal("eth_signTypedData_v4"),params:t.z.object({typed_data:t.z.object({domain:S,types:W,message:t.z.record(t.z.string(),t.z.any()),primary_type:t.z.string()})})}).merge(s),v=t.z.object({address:t.z.string(),method:t.z.literal("exportPrivateKey"),params:r.PrivateKeyExportInput}),T=t.z.discriminatedUnion("method",[_,b,x,R,j]),E=t.z.discriminatedUnion("method",[p,c,z]),P=t.z.union([T,E,v]),f=t.z.object({method:t.z.literal("signTransaction"),data:t.z.object({signed_transaction:t.z.string(),encoding:t.z.literal("base64")})}),k=t.z.object({method:t.z.literal("signAndSendTransaction"),data:t.z.object({transaction_id:t.z.string().optional(),hash:t.z.string(),caip2:o}).optional(),error:t.z.object({code:t.z.string(),message:t.z.string()}).optional()}),D=t.z.object({method:t.z.literal("signMessage"),data:t.z.object({signature:t.z.string(),encoding:t.z.literal("base64")})}),w=t.z.object({method:t.z.literal("eth_signTransaction"),data:t.z.object({signed_transaction:t.z.string(),encoding:t.z.literal("rlp")})}),K=t.z.object({method:t.z.literal("eth_sendTransaction"),data:t.z.object({transaction_id:t.z.string().optional(),hash:t.z.string(),caip2:o}).optional(),error:t.z.object({code:t.z.string(),message:t.z.string()}).optional()}),C=t.z.object({method:t.z.literal("personal_sign"),data:t.z.object({signature:t.z.string(),encoding:t.z.literal("hex")})}),q=t.z.object({method:t.z.literal("secp256k1_sign"),data:t.z.object({signature:d,encoding:t.z.literal("hex")})}),U=t.z.object({method:t.z.literal("eth_signTypedData_v4"),data:t.z.object({signature:t.z.string(),encoding:t.z.literal("hex")})}),M=t.z.object({method:t.z.literal("exportPrivateKey"),data:r.PrivateKeyExportInput}),O=t.z.discriminatedUnion("method",[f,k,D,w,K,C,q,U,M]),B=t.z.object({display_name:t.z.string().optional(),public_key:t.z.string(),role:l.optional()});let L=t.z.union([t.z.literal("solana"),t.z.literal("ethereum")]);const F=t.z.object({id:t.z.string(),address:t.z.string(),created_at:t.z.number(),chain_type:L,policy_ids:t.z.array(t.z.string()),authorization_threshold:t.z.number().optional(),additional_signers:t.z.array(t.z.object({signer_id:t.z.string().cuid2()})),owner_id:t.z.string().cuid2().nullable()}),H=t.z.string().cuid2(),N=t.z.string(),Q=t.z.object({public_key:N}).strict(),V={owner:Q.nullable().optional(),owner_id:H.nullable().optional()},Z=t.z.array(t.z.object({signer_id:H}).strict()),$=t.z.object({chain_type:L,policy_ids:t.z.array(t.z.string()).max(1).optional(),authorization_key_ids:t.z.array(t.z.string()).optional(),authorization_threshold:t.z.number().optional(),additional_signers:Z.optional(),...V}),G=$.refine((t=>{let e=void 0!==t.authorization_key_ids||void 0!==t.authorization_threshold,a=void 0!==t.additional_signers;return!e||!a}),"Please provide either additional_signers or authorization_key_ids, not both").refine((t=>void 0===t.authorization_threshold||t.authorization_threshold>=1&&t.authorization_key_ids&&t.authorization_threshold<=t.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((t=>!t.owner||!t.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((t=>{throw new e.InvalidInputError(t.error.message,e.PrivyErrorCode.INVALID_DATA)})),J=t.z.object({id:t.z.string(),chain_type:L,address:t.z.string(),authorization_threshold:t.z.number().optional()}),X=t.z.object({wallet_id:t.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:t})=>{throw new e.InvalidInputError(t.message,e.PrivyErrorCode.INVALID_DATA)})),Y=t.z.object({id:t.z.string()}),tt=t.z.object({id:t.z.string(),display_name:t.z.string().nullable(),public_key:t.z.string(),role:l,created_at:t.z.number()}),et=t.z.object({id:t.z.string(),display_name:t.z.string().nullable(),public_key:t.z.string(),created_at:t.z.number()}),at=a.Pagination.extend({chain_type:L.optional()}).strict(),it=t.z.object({policy_ids:t.z.array(t.z.string()).max(1,"Only one policy ID can be set").optional(),authorization_key_ids:t.z.array(t.z.string()).optional(),authorization_threshold:t.z.number().optional(),additional_signers:Z.optional()}).strict().superRefine(((t,e)=>{Object.values(t).every((t=>null==t))&&e.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==t.authorization_threshold&&0!==t.authorization_threshold&&(t.authorization_threshold<0&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===t.authorization_key_ids&&e.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),t.authorization_key_ids&&t.authorization_threshold>t.authorization_key_ids.length&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),rt=t.z.object({method:t.z.literal("signTransaction"),params:t.z.object({transaction:t.z.string(),encoding:t.z.literal("base64")}).strict()}).merge(n).strict(),ot=t.z.object({method:t.z.literal("signAndSendTransaction"),caip2:o,params:t.z.object({transaction:t.z.string(),encoding:t.z.literal("base64")}).strict()}).merge(n).strict(),nt=t.z.object({method:t.z.literal("signMessage"),params:t.z.object({message:t.z.string(),encoding:t.z.literal("base64")}).strict()}).merge(n).strict(),st=t.z.object({from:i.WalletAddress.optional(),to:i.WalletAddress.optional(),chain_id:u.optional(),nonce:u.optional(),data:d.optional(),value:u.optional(),type:t.z.union([t.z.literal(0),t.z.literal(1),t.z.literal(2)]).optional(),gas_limit:u.optional(),gas_price:u.optional(),max_fee_per_gas:u.optional(),max_priority_fee_per_gas:u.optional()}).strict(),lt=t.z.object({method:t.z.literal("eth_signTransaction"),params:t.z.object({transaction:st}).strict()}).merge(s).strict(),pt=t.z.object({method:t.z.literal("eth_sendTransaction"),caip2:o,params:t.z.object({transaction:st}).strict()}).merge(s).strict(),ct=t.z.object({message:t.z.string(),encoding:t.z.union([t.z.literal("utf-8"),t.z.literal("hex")])}).strict(),zt=t.z.object({method:t.z.literal("personal_sign"),params:ct}).merge(s).strict(),dt=t.z.object({method:t.z.literal("secp256k1_sign"),params:t.z.object({hash:g}).strict()}).merge(s).strict(),gt=t.z.object({method:t.z.literal("eth_signTypedData_v4"),params:t.z.object({typed_data:t.z.object({domain:S,types:W,message:t.z.record(t.z.string(),t.z.any()),primary_type:t.z.string()}).strict()}).strict()}).merge(s).strict(),ht=t.z.object({address:t.z.string(),method:t.z.literal("exportPrivateKey"),params:r.PrivateKeyExportInput}).strict(),ut=t.z.discriminatedUnion("method",[lt,pt,zt,gt,dt]),mt=t.z.discriminatedUnion("method",[rt,ot,nt]),_t=t.z.union([ut,mt,ht]),bt=t.z.object({chain_type:L,policy_ids:t.z.array(t.z.string()).max(1).optional(),authorization_key_ids:t.z.array(t.z.string()).optional(),authorization_threshold:t.z.number().optional(),additional_signers:t.z.array(t.z.object({signer_id:t.z.string().cuid2()}).strict()).optional(),...V}).strict();exports.AdditionalSignerInput=Z,exports.AuthorizationKeyDashboardResponse=tt,exports.AuthorizationKeyResponse=et,exports.AuthorizationKeyRole=l,exports.BaseWalletApiCreateInput=$,exports.CAIP2=o,exports.CurrentTypedDataDomainInputParams=I,exports.Hash=g,exports.Hex=d,exports.KeyQuorumId=H,exports.LegacyTypedDataDomainInputParams=A,exports.OwnerInput=Q,exports.OwnerInputFields=V,exports.P256PublicKey=N,exports.Quantity=u,exports.TypedDataDomainInputParams=S,exports.TypedDataTypesInputParams=W,exports.UnsignedEthereumTransaction=m,exports.UnsignedEthereumTransactionStrict=st,exports.WalletApiCreateInput=G,exports.WalletApiCreateResponse=J,exports.WalletApiCreateStrictInput=bt,exports.WalletApiEthereumPersonalSignRpcInput=x,exports.WalletApiEthereumPersonalSignRpcInputParams=y,exports.WalletApiEthereumPersonalSignRpcResponse=C,exports.WalletApiEthereumPersonalSignRpcStrictInput=zt,exports.WalletApiEthereumPersonalSignRpcStrictInputParams=ct,exports.WalletApiEthereumRpcInput=T,exports.WalletApiEthereumRpcStrictInput=ut,exports.WalletApiEthereumSecp256k1SignRpcInput=j,exports.WalletApiEthereumSecp256k1SignRpcResponse=q,exports.WalletApiEthereumSecp256k1SignRpcStrictInput=dt,exports.WalletApiEthereumSendTransactionRpcInput=b,exports.WalletApiEthereumSendTransactionRpcResponse=K,exports.WalletApiEthereumSendTransactionRpcStrictInput=pt,exports.WalletApiEthereumSignTransactionRpcInput=_,exports.WalletApiEthereumSignTransactionRpcResponse=w,exports.WalletApiEthereumSignTransactionRpcStrictInput=lt,exports.WalletApiEthereumSignTypedDataRpcInput=R,exports.WalletApiEthereumSignTypedDataRpcResponse=U,exports.WalletApiEthereumSignTypedDataRpcStrictInput=gt,exports.WalletApiExportPrivateKeyRpcInput=v,exports.WalletApiExportPrivateKeyRpcResponse=M,exports.WalletApiExportPrivateKeyRpcStrictInput=ht,exports.WalletApiRegisterAuthorizationKeyInput=B,exports.WalletApiRevokeAuthorizationKeyInput=Y,exports.WalletApiRpcInput=P,exports.WalletApiRpcResponse=O,exports.WalletApiRpcStrictInput=_t,exports.WalletApiSolanaRpcInput=E,exports.WalletApiSolanaRpcStrictInput=mt,exports.WalletApiSolanaSignAndSendTransactionRpcInput=c,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=k,exports.WalletApiSolanaSignAndSendTransactionRpcStrictInput=ot,exports.WalletApiSolanaSignMessageRpcInput=z,exports.WalletApiSolanaSignMessageRpcResponse=D,exports.WalletApiSolanaSignMessageRpcStrictInput=nt,exports.WalletApiSolanaSignTransactionRpcInput=p,exports.WalletApiSolanaSignTransactionRpcResponse=f,exports.WalletApiSolanaSignTransactionRpcStrictInput=rt,exports.WalletIdFromPath=X,exports.WalletResponse=F,exports.WalletUpdateInput=it,exports.WalletsSearchInput=at;
