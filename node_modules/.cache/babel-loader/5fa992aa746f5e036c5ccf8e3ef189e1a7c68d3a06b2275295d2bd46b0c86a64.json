{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrien\\\\Desktop\\\\CryptoGrind - Copie\\\\client\\\\src\\\\pages\\\\Missions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { GrindContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Missions() {\n  _s();\n  const {\n    grindBalance,\n    buyGrind\n  } = useContext(GrindContext);\n\n  // État pour les tickets de l'utilisateur, le total des tickets et les participants\n  const [tickets, setTickets] = useState(() => parseInt(localStorage.getItem('userTickets')) || 0);\n  const [totalTickets, setTotalTickets] = useState(() => parseInt(localStorage.getItem('totalTickets')) || 0);\n  const [participants, setParticipants] = useState(() => {\n    const savedParticipants = localStorage.getItem('lotteryParticipants');\n    return savedParticipants ? JSON.parse(savedParticipants) : [];\n  });\n  const [userTicketsInLottery, setUserTicketsInLottery] = useState(0);\n  const [lastLotteryDate, setLastLotteryDate] = useState(() => localStorage.getItem('lastLotteryDate') || null);\n  const [missionsStatus, setMissionsStatus] = useState({\n    xLike: false,\n    xRetweet: false,\n    xFollow: false,\n    abstractVote: false\n  });\n\n  // Sauvegarde des données dans localStorage\n  useEffect(() => {\n    localStorage.setItem('userTickets', tickets.toString());\n    localStorage.setItem('totalTickets', totalTickets.toString());\n    localStorage.setItem('lotteryParticipants', JSON.stringify(participants));\n    localStorage.setItem('lastLotteryDate', lastLotteryDate || '');\n  }, [tickets, totalTickets, participants, lastLotteryDate]);\n\n  // Vérifier automatiquement la loterie tous les 1000 tickets\n  useEffect(() => {\n    if (totalTickets >= 1000) {\n      if (!lastLotteryDate || new Date(lastLotteryDate).getTime() < new Date().getTime() - 1000 * 60) {\n        drawLottery();\n      }\n    }\n  }, [totalTickets]);\n\n  // Fonction pour vérifier les actions sur X (like, retweet, follow)\n  const verifyXAction = async actionType => {\n    // Remplace ceci par ta clé API ou ton Bearer Token pour X\n    const X_API_TOKEN = 'YOUR_X_API_TOKEN'; // À remplacer\n\n    try {\n      // Exemple d'URL de l'API X (v2) pour vérifier une action\n      let endpoint;\n      if (actionType === 'like') {\n        endpoint = 'https://api.x.com/2/users/me/likes';\n      } else if (actionType === 'retweet') {\n        endpoint = 'https://api.x.com/2/users/me/retweets';\n      } else if (actionType === 'follow') {\n        endpoint = 'https://api.x.com/2/users/me/following';\n      }\n\n      // Simuler une vérification (remplace ceci par une vraie requête API)\n      console.log(`Vérification de l'action ${actionType} sur X...`);\n\n      // Exemple de requête (à décommenter et adapter avec une vraie API)\n      /*\r\n      const response = await fetch(endpoint, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${X_API_TOKEN}`,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (actionType === 'like' || actionType === 'retweet') {\r\n        // Vérifie si l'utilisateur a liké ou retweeté un post spécifique\r\n        const postId = 'POST_ID'; // Remplace par l'ID du post cible\r\n        return data.data.some((item) => item.id === postId);\r\n      } else if (actionType === 'follow') {\r\n        // Vérifie si l'utilisateur suit un compte spécifique\r\n        const accountId = 'ACCOUNT_ID'; // Remplace par l'ID du compte cible\r\n        return data.data.some((user) => user.id === accountId);\r\n      }\r\n      */\n\n      // Simulation pour les tests (à supprimer une fois l'API intégrée)\n      return true; // Simule une action réussie\n    } catch (error) {\n      console.error(`Erreur lors de la vérification de l'action ${actionType} sur X:`, error);\n      return false;\n    }\n  };\n\n  // Fonction pour vérifier un vote sur Abstract\n  const verifyAbstractVote = async () => {\n    // À remplacer par une vraie intégration de l'API Abstract\n    console.log('Vérification du vote sur Abstract...');\n    // Simulation pour les tests\n    return true; // Simule un vote réussi\n  };\n\n  // Compléter une mission et attribuer des tickets\n  const completeMission = async action => {\n    let ticketsToAdd = 0;\n    let missionCompleted = false;\n    if (action === 'xLike') {\n      if (missionsStatus.xLike) {\n        alert('Mission déjà complétée : Like sur X.');\n        return;\n      }\n      missionCompleted = await verifyXAction('like');\n      ticketsToAdd = 1; // 1 ticket pour un like\n    } else if (action === 'xRetweet') {\n      if (missionsStatus.xRetweet) {\n        alert('Mission déjà complétée : Retweet sur X.');\n        return;\n      }\n      missionCompleted = await verifyXAction('retweet');\n      ticketsToAdd = 2; // 2 tickets pour un retweet\n    } else if (action === 'xFollow') {\n      if (missionsStatus.xFollow) {\n        alert('Mission déjà complétée : Follow sur X.');\n        return;\n      }\n      missionCompleted = await verifyXAction('follow');\n      ticketsToAdd = 2; // 2 tickets pour un follow\n    } else if (action === 'abstractVote') {\n      if (missionsStatus.abstractVote) {\n        alert('Mission déjà complétée : Vote sur Abstract.');\n        return;\n      }\n      missionCompleted = await verifyAbstractVote();\n      ticketsToAdd = 1; // À ajuster selon les besoins\n    }\n    if (missionCompleted) {\n      setTickets(prev => prev + ticketsToAdd);\n      setTotalTickets(prev => prev + ticketsToAdd);\n      setMissionsStatus(prev => ({\n        ...prev,\n        [action]: true\n      }));\n      alert(`Mission complétée : ${action} ! +${ticketsToAdd} ticket(s)`);\n    } else {\n      alert(`Échec de la vérification pour la mission : ${action}. Veuillez réessayer.`);\n    }\n  };\n\n  // Acheter un ticket avec $GRIND (via Abstract testnet)\n  const buyTicketWithGrind = async () => {\n    const ticketPriceGrind = 10; // 1 ticket = 10 $GRIND\n    const ticketPriceAbstract = ticketPriceGrind * 0.0001; // 1 $GRIND = 0.0001 $ABSTRACT\n\n    if (grindBalance < ticketPriceGrind) {\n      alert(`Solde $GRIND insuffisant ! Vous avez besoin de ${ticketPriceGrind} $GRIND pour acheter un ticket.`);\n      return;\n    }\n    try {\n      // Simuler une transaction sur Abstract testnet\n      console.log(`Transaction sur Abstract testnet : Paiement de ${ticketPriceAbstract} $ABSTRACT...`);\n\n      // Exemple de requête (à remplacer par une vraie interaction avec Abstract)\n      /*\r\n      const response = await fetch('ABSTRACT_TESTNET_ENDPOINT', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer YOUR_ABSTRACT_API_KEY`,\r\n        },\r\n        body: JSON.stringify({\r\n          amount: ticketPriceAbstract,\r\n          user: 'Utilisateur',\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      if (!data.success) throw new Error('Transaction échouée');\r\n      */\n\n      // Simulation pour les tests\n      const transactionSuccess = true; // Simule une transaction réussie\n\n      if (transactionSuccess) {\n        buyGrind(-ticketPriceGrind); // Réduire le solde $GRIND\n        setTickets(prev => prev + 1);\n        setTotalTickets(prev => prev + 1);\n        alert(`Vous avez acheté un ticket pour la loterie avec ${ticketPriceGrind} $GRIND (${ticketPriceAbstract} $ABSTRACT) !`);\n      } else {\n        alert('Échec de la transaction sur Abstract testnet. Veuillez réessayer.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'achat du ticket:', error);\n      alert('Une erreur est survenue lors de l\\'achat du ticket. Veuillez réessayer.');\n    }\n  };\n\n  // Rejoindre la loterie\n  const joinLottery = ticketCount => {\n    if (ticketCount > tickets) {\n      alert(\"Vous n'avez pas assez de tickets !\");\n      return;\n    }\n    if (ticketCount <= 0) {\n      alert(\"Veuillez entrer un nombre de tickets supérieur à 0.\");\n      return;\n    }\n    const updatedParticipants = [...participants, {\n      user: 'Utilisateur',\n      tickets: ticketCount\n    }];\n    setParticipants(updatedParticipants);\n    setTickets(prev => prev - ticketCount);\n    setUserTicketsInLottery(prev => prev + ticketCount);\n    alert(`Vous avez rejoint la loterie avec ${ticketCount} tickets !`);\n  };\n\n  // Tirer la loterie\n  const drawLottery = () => {\n    // Autoriser le tirage même si totalTickets < 1000 (bouton forcer)\n    const totalLotteryTickets = participants.reduce((sum, p) => sum + p.tickets, 0);\n    if (totalLotteryTickets === 0) {\n      alert(\"Aucun participant dans la loterie !\");\n      return;\n    }\n\n    // Tirage au sort basé sur le nombre de tickets\n    const randomTicket = Math.floor(Math.random() * totalLotteryTickets);\n    let cumulativeTickets = 0;\n    let winner = null;\n    for (const participant of participants) {\n      cumulativeTickets += participant.tickets;\n      if (randomTicket < cumulativeTickets) {\n        winner = participant;\n        break;\n      }\n    }\n    if (winner) {\n      alert(`${winner.user} a gagné un paquet de café Making Coffee avec ${winner.tickets} tickets !`);\n    }\n\n    // Réinitialiser la loterie\n    setParticipants([]);\n    setTotalTickets(0);\n    setUserTicketsInLottery(0);\n    setLastLotteryDate(new Date().toISOString());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4 text-white\",\n      children: \"Missions et Loterie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-2 text-white\",\n        children: \"Missions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: [\"Nombre de tickets : \", tickets]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: [\"Solde $GRIND : \", grindBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: [\"Total des tickets (tous les joueurs) : \", totalTickets]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => completeMission('xLike'),\n            className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n            children: \"Like sur X (+1 ticket)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => completeMission('xRetweet'),\n            className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n            children: \"Retweet sur X (+2 tickets)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => completeMission('xFollow'),\n            className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n            children: \"Follow sur X (+2 tickets)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => completeMission('abstractVote'),\n            className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n            children: \"Voter sur Abstract (+1 ticket)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: buyTicketWithGrind,\n            className: \"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\",\n            children: \"Acheter un ticket avec 10 $GRIND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-2 text-white\",\n        children: \"Loterie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: \"La loterie se d\\xE9clenche automatiquement tous les 1000 tickets. Vous pouvez forcer le tirage avec le bouton ci-dessous. Tous les 1000 tickets, un paquet de caf\\xE9 Making Coffee est mis en jeu !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: [\"Vos tickets dans la loterie : \", userTicketsInLottery]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mb-4\",\n          children: [\"Participants actuels : \", participants.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block mb-1\",\n              children: \"Nombre de tickets \\xE0 utiliser :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              max: tickets,\n              onChange: e => setUserTicketsInLottery(parseInt(e.target.value) || 0),\n              className: \"border p-2 rounded w-32\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => joinLottery(userTicketsInLottery),\n              className: \"ml-2 bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\",\n              children: \"Participer \\xE0 la loterie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: drawLottery,\n            className: \"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\",\n            children: \"Forcer le tirage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(Missions, \"I4dIcgkvvLRJRSz3DatH8f2TrwI=\");\n_c = Missions;\nexport default Missions;\nvar _c;\n$RefreshReg$(_c, \"Missions\");","map":{"version":3,"names":["React","useState","useEffect","useContext","GrindContext","jsxDEV","_jsxDEV","Missions","_s","grindBalance","buyGrind","tickets","setTickets","parseInt","localStorage","getItem","totalTickets","setTotalTickets","participants","setParticipants","savedParticipants","JSON","parse","userTicketsInLottery","setUserTicketsInLottery","lastLotteryDate","setLastLotteryDate","missionsStatus","setMissionsStatus","xLike","xRetweet","xFollow","abstractVote","setItem","toString","stringify","Date","getTime","drawLottery","verifyXAction","actionType","X_API_TOKEN","endpoint","console","log","error","verifyAbstractVote","completeMission","action","ticketsToAdd","missionCompleted","alert","prev","buyTicketWithGrind","ticketPriceGrind","ticketPriceAbstract","transactionSuccess","joinLottery","ticketCount","updatedParticipants","user","totalLotteryTickets","reduce","sum","p","randomTicket","Math","floor","random","cumulativeTickets","winner","participant","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","type","min","max","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/Adrien/Desktop/CryptoGrind - Copie/client/src/pages/Missions.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { GrindContext } from '../App';\r\n\r\nfunction Missions() {\r\n  const { grindBalance, buyGrind } = useContext(GrindContext);\r\n\r\n  // État pour les tickets de l'utilisateur, le total des tickets et les participants\r\n  const [tickets, setTickets] = useState(() => parseInt(localStorage.getItem('userTickets')) || 0);\r\n  const [totalTickets, setTotalTickets] = useState(() => parseInt(localStorage.getItem('totalTickets')) || 0);\r\n  const [participants, setParticipants] = useState(() => {\r\n    const savedParticipants = localStorage.getItem('lotteryParticipants');\r\n    return savedParticipants ? JSON.parse(savedParticipants) : [];\r\n  });\r\n  const [userTicketsInLottery, setUserTicketsInLottery] = useState(0);\r\n  const [lastLotteryDate, setLastLotteryDate] = useState(() => localStorage.getItem('lastLotteryDate') || null);\r\n  const [missionsStatus, setMissionsStatus] = useState({\r\n    xLike: false,\r\n    xRetweet: false,\r\n    xFollow: false,\r\n    abstractVote: false,\r\n  });\r\n\r\n  // Sauvegarde des données dans localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('userTickets', tickets.toString());\r\n    localStorage.setItem('totalTickets', totalTickets.toString());\r\n    localStorage.setItem('lotteryParticipants', JSON.stringify(participants));\r\n    localStorage.setItem('lastLotteryDate', lastLotteryDate || '');\r\n  }, [tickets, totalTickets, participants, lastLotteryDate]);\r\n\r\n  // Vérifier automatiquement la loterie tous les 1000 tickets\r\n  useEffect(() => {\r\n    if (totalTickets >= 1000) {\r\n      if (!lastLotteryDate || new Date(lastLotteryDate).getTime() < new Date().getTime() - 1000 * 60) {\r\n        drawLottery();\r\n      }\r\n    }\r\n  }, [totalTickets]);\r\n\r\n  // Fonction pour vérifier les actions sur X (like, retweet, follow)\r\n  const verifyXAction = async (actionType) => {\r\n    // Remplace ceci par ta clé API ou ton Bearer Token pour X\r\n    const X_API_TOKEN = 'YOUR_X_API_TOKEN'; // À remplacer\r\n\r\n    try {\r\n      // Exemple d'URL de l'API X (v2) pour vérifier une action\r\n      let endpoint;\r\n      if (actionType === 'like') {\r\n        endpoint = 'https://api.x.com/2/users/me/likes';\r\n      } else if (actionType === 'retweet') {\r\n        endpoint = 'https://api.x.com/2/users/me/retweets';\r\n      } else if (actionType === 'follow') {\r\n        endpoint = 'https://api.x.com/2/users/me/following';\r\n      }\r\n\r\n      // Simuler une vérification (remplace ceci par une vraie requête API)\r\n      console.log(`Vérification de l'action ${actionType} sur X...`);\r\n\r\n      // Exemple de requête (à décommenter et adapter avec une vraie API)\r\n      /*\r\n      const response = await fetch(endpoint, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${X_API_TOKEN}`,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (actionType === 'like' || actionType === 'retweet') {\r\n        // Vérifie si l'utilisateur a liké ou retweeté un post spécifique\r\n        const postId = 'POST_ID'; // Remplace par l'ID du post cible\r\n        return data.data.some((item) => item.id === postId);\r\n      } else if (actionType === 'follow') {\r\n        // Vérifie si l'utilisateur suit un compte spécifique\r\n        const accountId = 'ACCOUNT_ID'; // Remplace par l'ID du compte cible\r\n        return data.data.some((user) => user.id === accountId);\r\n      }\r\n      */\r\n\r\n      // Simulation pour les tests (à supprimer une fois l'API intégrée)\r\n      return true; // Simule une action réussie\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la vérification de l'action ${actionType} sur X:`, error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fonction pour vérifier un vote sur Abstract\r\n  const verifyAbstractVote = async () => {\r\n    // À remplacer par une vraie intégration de l'API Abstract\r\n    console.log('Vérification du vote sur Abstract...');\r\n    // Simulation pour les tests\r\n    return true; // Simule un vote réussi\r\n  };\r\n\r\n  // Compléter une mission et attribuer des tickets\r\n  const completeMission = async (action) => {\r\n    let ticketsToAdd = 0;\r\n    let missionCompleted = false;\r\n\r\n    if (action === 'xLike') {\r\n      if (missionsStatus.xLike) {\r\n        alert('Mission déjà complétée : Like sur X.');\r\n        return;\r\n      }\r\n      missionCompleted = await verifyXAction('like');\r\n      ticketsToAdd = 1; // 1 ticket pour un like\r\n    } else if (action === 'xRetweet') {\r\n      if (missionsStatus.xRetweet) {\r\n        alert('Mission déjà complétée : Retweet sur X.');\r\n        return;\r\n      }\r\n      missionCompleted = await verifyXAction('retweet');\r\n      ticketsToAdd = 2; // 2 tickets pour un retweet\r\n    } else if (action === 'xFollow') {\r\n      if (missionsStatus.xFollow) {\r\n        alert('Mission déjà complétée : Follow sur X.');\r\n        return;\r\n      }\r\n      missionCompleted = await verifyXAction('follow');\r\n      ticketsToAdd = 2; // 2 tickets pour un follow\r\n    } else if (action === 'abstractVote') {\r\n      if (missionsStatus.abstractVote) {\r\n        alert('Mission déjà complétée : Vote sur Abstract.');\r\n        return;\r\n      }\r\n      missionCompleted = await verifyAbstractVote();\r\n      ticketsToAdd = 1; // À ajuster selon les besoins\r\n    }\r\n\r\n    if (missionCompleted) {\r\n      setTickets((prev) => prev + ticketsToAdd);\r\n      setTotalTickets((prev) => prev + ticketsToAdd);\r\n      setMissionsStatus((prev) => ({ ...prev, [action]: true }));\r\n      alert(`Mission complétée : ${action} ! +${ticketsToAdd} ticket(s)`);\r\n    } else {\r\n      alert(`Échec de la vérification pour la mission : ${action}. Veuillez réessayer.`);\r\n    }\r\n  };\r\n\r\n  // Acheter un ticket avec $GRIND (via Abstract testnet)\r\n  const buyTicketWithGrind = async () => {\r\n    const ticketPriceGrind = 10; // 1 ticket = 10 $GRIND\r\n    const ticketPriceAbstract = ticketPriceGrind * 0.0001; // 1 $GRIND = 0.0001 $ABSTRACT\r\n\r\n    if (grindBalance < ticketPriceGrind) {\r\n      alert(`Solde $GRIND insuffisant ! Vous avez besoin de ${ticketPriceGrind} $GRIND pour acheter un ticket.`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Simuler une transaction sur Abstract testnet\r\n      console.log(`Transaction sur Abstract testnet : Paiement de ${ticketPriceAbstract} $ABSTRACT...`);\r\n\r\n      // Exemple de requête (à remplacer par une vraie interaction avec Abstract)\r\n      /*\r\n      const response = await fetch('ABSTRACT_TESTNET_ENDPOINT', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer YOUR_ABSTRACT_API_KEY`,\r\n        },\r\n        body: JSON.stringify({\r\n          amount: ticketPriceAbstract,\r\n          user: 'Utilisateur',\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      if (!data.success) throw new Error('Transaction échouée');\r\n      */\r\n\r\n      // Simulation pour les tests\r\n      const transactionSuccess = true; // Simule une transaction réussie\r\n\r\n      if (transactionSuccess) {\r\n        buyGrind(-ticketPriceGrind); // Réduire le solde $GRIND\r\n        setTickets((prev) => prev + 1);\r\n        setTotalTickets((prev) => prev + 1);\r\n        alert(`Vous avez acheté un ticket pour la loterie avec ${ticketPriceGrind} $GRIND (${ticketPriceAbstract} $ABSTRACT) !`);\r\n      } else {\r\n        alert('Échec de la transaction sur Abstract testnet. Veuillez réessayer.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'achat du ticket:', error);\r\n      alert('Une erreur est survenue lors de l\\'achat du ticket. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  // Rejoindre la loterie\r\n  const joinLottery = (ticketCount) => {\r\n    if (ticketCount > tickets) {\r\n      alert(\"Vous n'avez pas assez de tickets !\");\r\n      return;\r\n    }\r\n    if (ticketCount <= 0) {\r\n      alert(\"Veuillez entrer un nombre de tickets supérieur à 0.\");\r\n      return;\r\n    }\r\n\r\n    const updatedParticipants = [...participants, { user: 'Utilisateur', tickets: ticketCount }];\r\n    setParticipants(updatedParticipants);\r\n    setTickets((prev) => prev - ticketCount);\r\n    setUserTicketsInLottery((prev) => prev + ticketCount);\r\n    alert(`Vous avez rejoint la loterie avec ${ticketCount} tickets !`);\r\n  };\r\n\r\n  // Tirer la loterie\r\n  const drawLottery = () => {\r\n    // Autoriser le tirage même si totalTickets < 1000 (bouton forcer)\r\n    const totalLotteryTickets = participants.reduce((sum, p) => sum + p.tickets, 0);\r\n    if (totalLotteryTickets === 0) {\r\n      alert(\"Aucun participant dans la loterie !\");\r\n      return;\r\n    }\r\n\r\n    // Tirage au sort basé sur le nombre de tickets\r\n    const randomTicket = Math.floor(Math.random() * totalLotteryTickets);\r\n    let cumulativeTickets = 0;\r\n    let winner = null;\r\n\r\n    for (const participant of participants) {\r\n      cumulativeTickets += participant.tickets;\r\n      if (randomTicket < cumulativeTickets) {\r\n        winner = participant;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (winner) {\r\n      alert(`${winner.user} a gagné un paquet de café Making Coffee avec ${winner.tickets} tickets !`);\r\n    }\r\n\r\n    // Réinitialiser la loterie\r\n    setParticipants([]);\r\n    setTotalTickets(0);\r\n    setUserTicketsInLottery(0);\r\n    setLastLotteryDate(new Date().toISOString());\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 text-center\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-white\">Missions et Loterie</h1>\r\n\r\n      {/* Section Missions */}\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"text-xl font-bold mb-2 text-white\">Missions</h2>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <p className=\"text-lg mb-4\">Nombre de tickets : {tickets}</p>\r\n          <p className=\"text-lg mb-4\">Solde $GRIND : {grindBalance}</p>\r\n          <p className=\"text-lg mb-4\">Total des tickets (tous les joueurs) : {totalTickets}</p>\r\n          <div className=\"space-y-4\">\r\n            <button\r\n              onClick={() => completeMission('xLike')}\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n            >\r\n              Like sur X (+1 ticket)\r\n            </button>\r\n            <button\r\n              onClick={() => completeMission('xRetweet')}\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n            >\r\n              Retweet sur X (+2 tickets)\r\n            </button>\r\n            <button\r\n              onClick={() => completeMission('xFollow')}\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n            >\r\n              Follow sur X (+2 tickets)\r\n            </button>\r\n            <button\r\n              onClick={() => completeMission('abstractVote')}\r\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\r\n            >\r\n              Voter sur Abstract (+1 ticket)\r\n            </button>\r\n            <button\r\n              onClick={buyTicketWithGrind}\r\n              className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\r\n            >\r\n              Acheter un ticket avec 10 $GRIND\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section Loterie */}\r\n      <div>\r\n        <h2 className=\"text-xl font-bold mb-2 text-white\">Loterie</h2>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <p className=\"text-lg mb-4\">\r\n            La loterie se déclenche automatiquement tous les 1000 tickets. Vous pouvez forcer le tirage avec le bouton ci-dessous.\r\n            Tous les 1000 tickets, un paquet de café Making Coffee est mis en jeu !\r\n          </p>\r\n          <p className=\"text-lg mb-4\">Vos tickets dans la loterie : {userTicketsInLottery}</p>\r\n          <p className=\"text-lg mb-4\">Participants actuels : {participants.length}</p>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block mb-1\">Nombre de tickets à utiliser :</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max={tickets}\r\n                onChange={(e) => setUserTicketsInLottery(parseInt(e.target.value) || 0)}\r\n                className=\"border p-2 rounded w-32\"\r\n              />\r\n              <button\r\n                onClick={() => joinLottery(userTicketsInLottery)}\r\n                className=\"ml-2 bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\"\r\n              >\r\n                Participer à la loterie\r\n              </button>\r\n            </div>\r\n            <button\r\n              onClick={drawLottery}\r\n              className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n            >\r\n              Forcer le tirage\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Missions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}