{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHash = getHash;\nexports.createCurve = createCurve;\n/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\n/** connects noble-curves to noble-hashes */\nfunction getHash(hash) {\n  return {\n    hash,\n    hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),\n    randomBytes: utils_1.randomBytes\n  };\n}\nfunction createCurve(curveDef, defHash) {\n  const create = hash => (0, weierstrass_js_1.weierstrass)({\n    ...curveDef,\n    ...getHash(hash)\n  });\n  return {\n    ...create(defHash),\n    create\n  };\n}","map":{"version":3,"names":["exports","getHash","createCurve","hmac_1","require","utils_1","weierstrass_js_1","hash","hmac","key","msgs","concatBytes","randomBytes","curveDef","defHash","create","weierstrass"],"sources":["C:\\Users\\Adrien\\Desktop\\CryptoGrind - Copie\\client\\node_modules\\viem\\node_modules\\@noble\\curves\\src\\_shortw_utils.ts"],"sourcesContent":["/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.js';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.js';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n"],"mappings":";;;;;AAWAA,OAAA,CAAAC,OAAA,GAAAA,OAAA;AAeAD,OAAA,CAAAE,WAAA,GAAAA,WAAA;AA1BA;;;;AAIA;AACA,MAAAC,MAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,gBAAA,GAAAF,OAAA;AAEA;AACA,SAAgBH,OAAOA,CAACM,IAAW;EAKjC,OAAO;IACLA,IAAI;IACJC,IAAI,EAAEA,CAACC,GAAe,EAAE,GAAGC,IAAkB,KAAK,IAAAP,MAAA,CAAAK,IAAI,EAACD,IAAI,EAAEE,GAAG,EAAE,IAAAJ,OAAA,CAAAM,WAAW,EAAC,GAAGD,IAAI,CAAC,CAAC;IACvFE,WAAW,EAAXP,OAAA,CAAAO;GACD;AACH;AAKA,SAAgBV,WAAWA,CAACW,QAAkB,EAAEC,OAAc;EAC5D,MAAMC,MAAM,GAAIR,IAAW,IAAc,IAAAD,gBAAA,CAAAU,WAAW,EAAC;IAAE,GAAGH,QAAQ;IAAE,GAAGZ,OAAO,CAACM,IAAI;EAAC,CAAE,CAAC;EACvF,OAAO;IAAE,GAAGQ,MAAM,CAACD,OAAO,CAAC;IAAEC;EAAM,CAAE;AACvC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}