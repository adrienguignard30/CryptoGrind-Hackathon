{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha224 = exports.sha256 = exports.SHA256 = void 0;\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nconst _md_ts_1 = require(\"./_md.js\");\nconst utils_ts_1 = require(\"./utils.js\");\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */new Uint32Array(64);\nclass SHA256 extends _md_ts_1.HashMD {\n  constructor(outputLen = 32) {\n    super(64, outputLen, 8, false);\n    // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n    this.A = SHA256_IV[0] | 0;\n    this.B = SHA256_IV[1] | 0;\n    this.C = SHA256_IV[2] | 0;\n    this.D = SHA256_IV[3] | 0;\n    this.E = SHA256_IV[4] | 0;\n    this.F = SHA256_IV[5] | 0;\n    this.G = SHA256_IV[6] | 0;\n    this.H = SHA256_IV[7] | 0;\n  }\n  get() {\n    const {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ W15 >>> 3;\n      const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = (0, utils_ts_1.rotr)(E, 6) ^ (0, utils_ts_1.rotr)(E, 11) ^ (0, utils_ts_1.rotr)(E, 25);\n      const T1 = H + sigma1 + (0, _md_ts_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = (0, utils_ts_1.rotr)(A, 2) ^ (0, utils_ts_1.rotr)(A, 13) ^ (0, utils_ts_1.rotr)(A, 22);\n      const T2 = sigma0 + (0, _md_ts_1.Maj)(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\nexports.SHA256 = SHA256;\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  constructor() {\n    super(28);\n    this.A = 0xc1059ed8 | 0;\n    this.B = 0x367cd507 | 0;\n    this.C = 0x3070dd17 | 0;\n    this.D = 0xf70e5939 | 0;\n    this.E = 0xffc00b31 | 0;\n    this.F = 0x68581511 | 0;\n    this.G = 0x64f98fa7 | 0;\n    this.H = 0xbefa4fa4 | 0;\n  }\n}\n/** SHA2-256 hash function */\nexports.sha256 = (0, utils_ts_1.wrapConstructor)(() => new SHA256());\n/** SHA2-224 hash function */\nexports.sha224 = (0, utils_ts_1.wrapConstructor)(() => new SHA224());","map":{"version":3,"names":["_md_ts_1","require","utils_ts_1","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","HashMD","constructor","outputLen","A","B","C","D","E","F","G","H","get","set","process","view","offset","i","getUint32","W15","W2","s0","rotr","s1","sigma1","T1","Chi","sigma0","T2","Maj","roundClean","fill","destroy","buffer","exports","SHA224","sha256","wrapConstructor","sha224"],"sources":["C:\\Users\\Adrien\\Desktop\\CryptoGrind - Copie\\client\\node_modules\\ox\\node_modules\\@noble\\hashes\\src\\sha256.ts"],"sourcesContent":["/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, rotr, wrapConstructor } from './utils.ts';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n"],"mappings":";;;;;;AAAA;;;;;;;;;AASA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAEA;AACA;AACA,MAAME,QAAQ,GAAG,eAAgB,IAAIC,WAAW,CAAC,CAC/C,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9F,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAC/F,CAAC;AAEF;AACA;AACA,MAAMC,SAAS,GAAG,eAAgB,IAAID,WAAW,CAAC,CAChD,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAC/F,CAAC;AAEF;;;;AAIA,MAAME,QAAQ,GAAG,eAAgB,IAAIF,WAAW,CAAC,EAAE,CAAC;AACpD,MAAaG,MAAO,SAAQP,QAAA,CAAAQ,MAAc;EAYxCC,YAAYC,SAAA,GAAoB,EAAE;IAChC,KAAK,CAAC,EAAE,EAAEA,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC;IAZhC;IACA;IACU,KAAAC,CAAC,GAAWN,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAO,CAAC,GAAWP,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAQ,CAAC,GAAWR,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAS,CAAC,GAAWT,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAU,CAAC,GAAWV,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAW,CAAC,GAAWX,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAY,CAAC,GAAWZ,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5B,KAAAa,CAAC,GAAWb,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAItC;EACUc,GAAGA,CAAA;IACX,MAAM;MAAER,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC;IAAC,CAAE,GAAG,IAAI;IACvC,OAAO,CAACP,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACjC;EACA;EACUE,GAAGA,CACXT,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAS;IAEtF,IAAI,CAACP,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;IACd,IAAI,CAACC,CAAC,GAAGA,CAAC,GAAG,CAAC;EAChB;EACUG,OAAOA,CAACC,IAAc,EAAEC,MAAc;IAC9C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAED,MAAM,IAAI,CAAC,EAAEjB,QAAQ,CAACkB,CAAC,CAAC,GAAGF,IAAI,CAACG,SAAS,CAACF,MAAM,EAAE,KAAK,CAAC;IACrF,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC5B,MAAME,GAAG,GAAGpB,QAAQ,CAACkB,CAAC,GAAG,EAAE,CAAC;MAC5B,MAAMG,EAAE,GAAGrB,QAAQ,CAACkB,CAAC,GAAG,CAAC,CAAC;MAC1B,MAAMI,EAAE,GAAG,IAAA1B,UAAA,CAAA2B,IAAI,EAACH,GAAG,EAAE,CAAC,CAAC,GAAG,IAAAxB,UAAA,CAAA2B,IAAI,EAACH,GAAG,EAAE,EAAE,CAAC,GAAIA,GAAG,KAAK,CAAE;MACrD,MAAMI,EAAE,GAAG,IAAA5B,UAAA,CAAA2B,IAAI,EAACF,EAAE,EAAE,EAAE,CAAC,GAAG,IAAAzB,UAAA,CAAA2B,IAAI,EAACF,EAAE,EAAE,EAAE,CAAC,GAAIA,EAAE,KAAK,EAAG;MACpDrB,QAAQ,CAACkB,CAAC,CAAC,GAAIM,EAAE,GAAGxB,QAAQ,CAACkB,CAAC,GAAG,CAAC,CAAC,GAAGI,EAAE,GAAGtB,QAAQ,CAACkB,CAAC,GAAG,EAAE,CAAC,GAAI,CAAC;IAClE;IACA;IACA,IAAI;MAAEb,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC,CAAC;MAAEC;IAAC,CAAE,GAAG,IAAI;IACrC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMO,MAAM,GAAG,IAAA7B,UAAA,CAAA2B,IAAI,EAACd,CAAC,EAAE,CAAC,CAAC,GAAG,IAAAb,UAAA,CAAA2B,IAAI,EAACd,CAAC,EAAE,EAAE,CAAC,GAAG,IAAAb,UAAA,CAAA2B,IAAI,EAACd,CAAC,EAAE,EAAE,CAAC;MACrD,MAAMiB,EAAE,GAAId,CAAC,GAAGa,MAAM,GAAG,IAAA/B,QAAA,CAAAiC,GAAG,EAAClB,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGd,QAAQ,CAACqB,CAAC,CAAC,GAAGlB,QAAQ,CAACkB,CAAC,CAAC,GAAI,CAAC;MACtE,MAAMU,MAAM,GAAG,IAAAhC,UAAA,CAAA2B,IAAI,EAAClB,CAAC,EAAE,CAAC,CAAC,GAAG,IAAAT,UAAA,CAAA2B,IAAI,EAAClB,CAAC,EAAE,EAAE,CAAC,GAAG,IAAAT,UAAA,CAAA2B,IAAI,EAAClB,CAAC,EAAE,EAAE,CAAC;MACrD,MAAMwB,EAAE,GAAID,MAAM,GAAG,IAAAlC,QAAA,CAAAoC,GAAG,EAACzB,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAI,CAAC;MACtCK,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAID,CAAC,GAAGkB,EAAE,GAAI,CAAC;MAChBlB,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAIqB,EAAE,GAAGG,EAAE,GAAI,CAAC;IACnB;IACA;IACAxB,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpBC,CAAC,GAAIA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAI,CAAC;IACpB,IAAI,CAACE,GAAG,CAACT,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAClC;EACUmB,UAAUA,CAAA;IAClB/B,QAAQ,CAACgC,IAAI,CAAC,CAAC,CAAC;EAClB;EACAC,OAAOA,CAAA;IACL,IAAI,CAACnB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChC,IAAI,CAACoB,MAAM,CAACF,IAAI,CAAC,CAAC,CAAC;EACrB;;AA3EFG,OAAA,CAAAlC,MAAA,GAAAA,MAAA;AA8EA;;;AAGA,MAAMmC,MAAO,SAAQnC,MAAM;EASzBE,YAAA;IACE,KAAK,CAAC,EAAE,CAAC;IATD,KAAAE,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAClB,KAAAC,CAAC,GAAG,UAAU,GAAG,CAAC;EAG5B;;AAGF;AACauB,OAAA,CAAAE,MAAM,GAA0B,IAAAzC,UAAA,CAAA0C,eAAe,EAAC,MAAM,IAAIrC,MAAM,EAAE,CAAC;AAChF;AACakC,OAAA,CAAAI,MAAM,GAA0B,IAAA3C,UAAA,CAAA0C,eAAe,EAAC,MAAM,IAAIF,MAAM,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}