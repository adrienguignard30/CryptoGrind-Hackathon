{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adrien\\\\Desktop\\\\CryptoGrind - Copie\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { WagmiConfig, createConfig, useBalance } from 'wagmi';\nimport { createPublicClient, http } from 'viem';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { injected } from '@wagmi/connectors';\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport Notifications from './pages/Notifications';\nimport Profile from './pages/Profile';\nimport Missions from './pages/Missions';\nimport NotificationWen from './components/NotificationWen';\nimport AddProject from './components/AddProject';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst abstractTestnet = {\n  id: 11124,\n  name: 'Abstract Testnet',\n  network: 'abstract-testnet',\n  nativeCurrency: {\n    name: 'Ether',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.testnet.abs.xyz']\n    },\n    public: {\n      http: ['https://api.testnet.abs.xyz']\n    }\n  },\n  blockExplorers: {\n    default: {\n      name: 'AbstractScan',\n      url: 'https://sepolia.abscan.org'\n    }\n  },\n  testnet: true\n};\nconst queryClient = new QueryClient();\nconst config = createConfig({\n  chains: [abstractTestnet],\n  connectors: [injected()],\n  client: ({\n    chain\n  }) => createPublicClient({\n    chain,\n    transport: http()\n  })\n});\nexport const GrindContext = /*#__PURE__*/React.createContext();\nfunction App() {\n  _s();\n  const [grindBalance, setGrindBalance] = useState(0);\n  const [account, setAccount] = useState(null);\n  const [projects, setProjects] = useState([]);\n\n  // Vérifier la connexion MetaMask\n  useEffect(() => {\n    var _window$ethereum;\n    const checkConnection = async () => {\n      try {\n        if (!window.ethereum) {\n          console.error('MetaMask non détecté');\n          return;\n        }\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          const normalizedAccount = accounts[0].toLowerCase();\n          console.log('MetaMask connecté, adresse:', normalizedAccount);\n          setAccount(normalizedAccount);\n        } else {\n          console.log('Aucun compte MetaMask connecté');\n        }\n      } catch (error) {\n        console.error('Erreur vérification connexion:', error);\n      }\n    };\n    checkConnection();\n    (_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.on('accountsChanged', accounts => {\n      if (accounts.length > 0) {\n        const normalizedAccount = accounts[0].toLowerCase();\n        console.log('Nouveau compte détecté:', normalizedAccount);\n        setAccount(normalizedAccount);\n      } else {\n        console.log('Déconnexion détectée');\n        setAccount(null);\n      }\n    });\n    return () => {\n      var _window$ethereum2;\n      (_window$ethereum2 = window.ethereum) === null || _window$ethereum2 === void 0 ? void 0 : _window$ethereum2.removeListener('accountsChanged');\n    };\n  }, []);\n\n  // Obtenir le solde ETH\n  const {\n    data: balanceData,\n    error: balanceError,\n    isLoading: balanceLoading\n  } = useBalance({\n    address: account,\n    chainId: abstractTestnet.id,\n    enabled: !!account\n  });\n\n  // Mettre à jour grindBalance\n  useEffect(() => {\n    console.log('App - Account:', account);\n    console.log('App - balanceData:', balanceData);\n    console.log('App - balanceError:', balanceError);\n    console.log('App - balanceLoading:', balanceLoading);\n    if (balanceData) {\n      setGrindBalance(balanceData.value.toString()); // Solde en wei\n      console.log('Solde ETH:', balanceData.formatted, 'ETH');\n    } else if (balanceError) {\n      console.error('Erreur récupération solde:', balanceError.message);\n    }\n  }, [balanceData, balanceError, balanceLoading, account]);\n\n  // Charger les projets depuis localStorage\n  useEffect(() => {\n    if (account) {\n      const savedProjects = localStorage.getItem(`projects_${account}`);\n      console.log('Chargement projets depuis localStorage:', savedProjects);\n      setProjects(savedProjects ? JSON.parse(savedProjects) : []);\n    } else {\n      setProjects([]);\n      console.log('Aucun account, réinitialisation projets');\n    }\n  }, [account]);\n\n  // Synchroniser localStorage avec l'état projects\n  useEffect(() => {\n    if (account) {\n      console.log('Sauvegarde projets dans localStorage:', projects);\n      localStorage.setItem(`projects_${account}`, JSON.stringify(projects));\n    }\n  }, [projects, account]);\n  const handleAddProject = project => {\n    setProjects(prevProjects => {\n      const updatedProjects = [...prevProjects, project];\n      console.log('Nouveau projet ajouté:', project);\n      return updatedProjects;\n    });\n  };\n  console.log('Projets actuels:', projects);\n  return /*#__PURE__*/_jsxDEV(WagmiConfig, {\n    config: config,\n    children: /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n      client: queryClient,\n      children: /*#__PURE__*/_jsxDEV(GrindContext.Provider, {\n        value: {\n          grindBalance,\n          account\n        },\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(Home, {\n                projects: projects,\n                setProjects: setProjects,\n                handleAddProject: handleAddProject\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/notifications\",\n              element: /*#__PURE__*/_jsxDEV(Notifications, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/profile\",\n              element: /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/missions\",\n              element: /*#__PURE__*/_jsxDEV(Missions, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/lottery\",\n              element: /*#__PURE__*/_jsxDEV(NotificationWen, {\n                projects: projects\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/add-project\",\n              element: /*#__PURE__*/_jsxDEV(AddProject, {\n                onAddProject: handleAddProject\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/VoCRERtNuVMLwHBGWbpo2ixVzM=\", false, function () {\n  return [useBalance];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WagmiConfig","createConfig","useBalance","createPublicClient","http","BrowserRouter","Router","Routes","Route","QueryClient","QueryClientProvider","injected","Header","Home","Notifications","Profile","Missions","NotificationWen","AddProject","jsxDEV","_jsxDEV","abstractTestnet","id","name","network","nativeCurrency","symbol","decimals","rpcUrls","default","public","blockExplorers","url","testnet","queryClient","config","chains","connectors","client","chain","transport","GrindContext","createContext","App","_s","grindBalance","setGrindBalance","account","setAccount","projects","setProjects","_window$ethereum","checkConnection","window","ethereum","console","error","accounts","request","method","length","normalizedAccount","toLowerCase","log","on","_window$ethereum2","removeListener","data","balanceData","balanceError","isLoading","balanceLoading","address","chainId","enabled","value","toString","formatted","message","savedProjects","localStorage","getItem","JSON","parse","setItem","stringify","handleAddProject","project","prevProjects","updatedProjects","children","Provider","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onAddProject","_c","$RefreshReg$"],"sources":["C:/Users/Adrien/Desktop/CryptoGrind - Copie/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { WagmiConfig, createConfig, useBalance } from 'wagmi';\r\nimport { createPublicClient, http } from 'viem';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { injected } from '@wagmi/connectors';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport Notifications from './pages/Notifications';\r\nimport Profile from './pages/Profile';\r\nimport Missions from './pages/Missions';\r\nimport NotificationWen from './components/NotificationWen';\r\nimport AddProject from './components/AddProject';\r\n\r\nconst abstractTestnet = {\r\n  id: 11124,\r\n  name: 'Abstract Testnet',\r\n  network: 'abstract-testnet',\r\n  nativeCurrency: {\r\n    name: 'Ether',\r\n    symbol: 'ETH',\r\n    decimals: 18,\r\n  },\r\n  rpcUrls: {\r\n    default: {\r\n      http: ['https://api.testnet.abs.xyz'],\r\n    },\r\n    public: {\r\n      http: ['https://api.testnet.abs.xyz'],\r\n    },\r\n  },\r\n  blockExplorers: {\r\n    default: { name: 'AbstractScan', url: 'https://sepolia.abscan.org' },\r\n  },\r\n  testnet: true,\r\n};\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nconst config = createConfig({\r\n  chains: [abstractTestnet],\r\n  connectors: [injected()],\r\n  client: ({ chain }) =>\r\n    createPublicClient({\r\n      chain,\r\n      transport: http(),\r\n    }),\r\n});\r\n\r\nexport const GrindContext = React.createContext();\r\n\r\nfunction App() {\r\n  const [grindBalance, setGrindBalance] = useState(0);\r\n  const [account, setAccount] = useState(null);\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  // Vérifier la connexion MetaMask\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        if (!window.ethereum) {\r\n          console.error('MetaMask non détecté');\r\n          return;\r\n        }\r\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n        if (accounts.length > 0) {\r\n          const normalizedAccount = accounts[0].toLowerCase();\r\n          console.log('MetaMask connecté, adresse:', normalizedAccount);\r\n          setAccount(normalizedAccount);\r\n        } else {\r\n          console.log('Aucun compte MetaMask connecté');\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur vérification connexion:', error);\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n\r\n    window.ethereum?.on('accountsChanged', (accounts) => {\r\n      if (accounts.length > 0) {\r\n        const normalizedAccount = accounts[0].toLowerCase();\r\n        console.log('Nouveau compte détecté:', normalizedAccount);\r\n        setAccount(normalizedAccount);\r\n      } else {\r\n        console.log('Déconnexion détectée');\r\n        setAccount(null);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      window.ethereum?.removeListener('accountsChanged');\r\n    };\r\n  }, []);\r\n\r\n  // Obtenir le solde ETH\r\n  const { data: balanceData, error: balanceError, isLoading: balanceLoading } = useBalance({\r\n    address: account,\r\n    chainId: abstractTestnet.id,\r\n    enabled: !!account,\r\n  });\r\n\r\n  // Mettre à jour grindBalance\r\n  useEffect(() => {\r\n    console.log('App - Account:', account);\r\n    console.log('App - balanceData:', balanceData);\r\n    console.log('App - balanceError:', balanceError);\r\n    console.log('App - balanceLoading:', balanceLoading);\r\n\r\n    if (balanceData) {\r\n      setGrindBalance(balanceData.value.toString()); // Solde en wei\r\n      console.log('Solde ETH:', balanceData.formatted, 'ETH');\r\n    } else if (balanceError) {\r\n      console.error('Erreur récupération solde:', balanceError.message);\r\n    }\r\n  }, [balanceData, balanceError, balanceLoading, account]);\r\n\r\n  // Charger les projets depuis localStorage\r\n  useEffect(() => {\r\n    if (account) {\r\n      const savedProjects = localStorage.getItem(`projects_${account}`);\r\n      console.log('Chargement projets depuis localStorage:', savedProjects);\r\n      setProjects(savedProjects ? JSON.parse(savedProjects) : []);\r\n    } else {\r\n      setProjects([]);\r\n      console.log('Aucun account, réinitialisation projets');\r\n    }\r\n  }, [account]);\r\n\r\n  // Synchroniser localStorage avec l'état projects\r\n  useEffect(() => {\r\n    if (account) {\r\n      console.log('Sauvegarde projets dans localStorage:', projects);\r\n      localStorage.setItem(`projects_${account}`, JSON.stringify(projects));\r\n    }\r\n  }, [projects, account]);\r\n\r\n  const handleAddProject = (project) => {\r\n    setProjects((prevProjects) => {\r\n      const updatedProjects = [...prevProjects, project];\r\n      console.log('Nouveau projet ajouté:', project);\r\n      return updatedProjects;\r\n    });\r\n  };\r\n\r\n  console.log('Projets actuels:', projects);\r\n\r\n  return (\r\n    <WagmiConfig config={config}>\r\n      <QueryClientProvider client={queryClient}>\r\n        <GrindContext.Provider value={{ grindBalance, account }}>\r\n          <Router>\r\n            <Header />\r\n            <Routes>\r\n              <Route\r\n                path=\"/\"\r\n                element={\r\n                  <Home\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                    handleAddProject={handleAddProject}\r\n                  />\r\n                }\r\n              />\r\n              <Route path=\"/notifications\" element={<Notifications />} />\r\n              <Route path=\"/profile\" element={<Profile />} />\r\n              <Route path=\"/missions\" element={<Missions />} />\r\n              <Route path=\"/lottery\" element={<NotificationWen projects={projects} />} />\r\n              <Route path=\"/add-project\" element={<AddProject onAddProject={handleAddProject} />} />\r\n            </Routes>\r\n          </Router>\r\n        </GrindContext.Provider>\r\n      </QueryClientProvider>\r\n    </WagmiConfig>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}