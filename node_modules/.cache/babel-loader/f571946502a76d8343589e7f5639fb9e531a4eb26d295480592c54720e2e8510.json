{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { createSigner, fetchSignerType, loadSignerType, storeSignerType } from './sign/util.js';\nimport { Communicator } from './core/communicator/Communicator.js';\nimport { CB_WALLET_RPC_URL } from './core/constants.js';\nimport { standardErrorCodes } from './core/error/constants.js';\nimport { standardErrors } from './core/error/errors.js';\nimport { serializeError } from './core/error/serialize.js';\nimport { ProviderEventEmitter } from './core/provider/interface.js';\nimport { ScopedLocalStorage } from './core/storage/ScopedLocalStorage.js';\nimport { hexStringFromNumber } from './core/type/util.js';\nimport { checkErrorForInvalidRequestArgs, fetchRPCRequest } from './util/provider.js';\nexport class CoinbaseWalletProvider extends ProviderEventEmitter {\n  constructor(_a) {\n    var {\n        metadata\n      } = _a,\n      _b = _a.preference,\n      {\n        keysUrl\n      } = _b,\n      preference = __rest(_b, [\"keysUrl\"]);\n    super();\n    this.signer = null;\n    this.isCoinbaseWallet = true;\n    this.metadata = metadata;\n    this.preference = preference;\n    this.communicator = new Communicator({\n      url: keysUrl,\n      metadata,\n      preference\n    });\n    const signerType = loadSignerType();\n    if (signerType) {\n      this.signer = this.initSigner(signerType);\n    }\n  }\n  async request(args) {\n    try {\n      checkErrorForInvalidRequestArgs(args);\n      if (!this.signer) {\n        switch (args.method) {\n          case 'eth_requestAccounts':\n            {\n              const signerType = await this.requestSignerSelection(args);\n              const signer = this.initSigner(signerType);\n              await signer.handshake(args);\n              this.signer = signer;\n              storeSignerType(signerType);\n              break;\n            }\n          case 'wallet_sendCalls':\n            {\n              const ephemeralSigner = this.initSigner('scw');\n              await ephemeralSigner.handshake({\n                method: 'handshake'\n              }); // exchange session keys\n              const result = await ephemeralSigner.request(args); // send diffie-hellman encrypted request\n              await ephemeralSigner.cleanup(); // clean up (rotate) the ephemeral session keys\n              return result;\n            }\n          case 'wallet_getCallsStatus':\n            return fetchRPCRequest(args, CB_WALLET_RPC_URL);\n          case 'net_version':\n            return 1;\n          // default value\n          case 'eth_chainId':\n            return hexStringFromNumber(1);\n          // default value\n          default:\n            {\n              throw standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n            }\n        }\n      }\n      return await this.signer.request(args);\n    } catch (error) {\n      const {\n        code\n      } = error;\n      if (code === standardErrorCodes.provider.unauthorized) this.disconnect();\n      return Promise.reject(serializeError(error));\n    }\n  }\n  /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n  async enable() {\n    console.warn(`.enable() has been deprecated. Please use .request({ method: \"eth_requestAccounts\" }) instead.`);\n    return await this.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n  async disconnect() {\n    var _a;\n    await ((_a = this.signer) === null || _a === void 0 ? void 0 : _a.cleanup());\n    this.signer = null;\n    ScopedLocalStorage.clearAll();\n    this.emit('disconnect', standardErrors.provider.disconnected('User initiated disconnection'));\n  }\n  requestSignerSelection(handshakeRequest) {\n    return fetchSignerType({\n      communicator: this.communicator,\n      preference: this.preference,\n      metadata: this.metadata,\n      handshakeRequest,\n      callback: this.emit.bind(this)\n    });\n  }\n  initSigner(signerType) {\n    return createSigner({\n      signerType,\n      metadata: this.metadata,\n      communicator: this.communicator,\n      callback: this.emit.bind(this)\n    });\n  }\n}","map":{"version":3,"names":["createSigner","fetchSignerType","loadSignerType","storeSignerType","Communicator","CB_WALLET_RPC_URL","standardErrorCodes","standardErrors","serializeError","ProviderEventEmitter","ScopedLocalStorage","hexStringFromNumber","checkErrorForInvalidRequestArgs","fetchRPCRequest","CoinbaseWalletProvider","constructor","_a","metadata","_b","preference","keysUrl","__rest","signer","isCoinbaseWallet","communicator","url","signerType","initSigner","request","args","method","requestSignerSelection","handshake","ephemeralSigner","result","cleanup","provider","unauthorized","error","code","disconnect","Promise","reject","enable","console","warn","clearAll","emit","disconnected","handshakeRequest","callback","bind"],"sources":["../src/CoinbaseWalletProvider.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AACA,SAASA,YAAY,EAAEC,eAAe,EAAEC,cAAc,EAAEC,eAAe,QAAQ,gBAAgB;AAC/F,SAASC,YAAY,QAAQ,qCAAqC;AAClE,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAIEC,oBAAoB,QAGf,8BAA8B;AACrC,SAASC,kBAAkB,QAAQ,sCAAsC;AACzE,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,+BAA+B,EAAEC,eAAe,QAAQ,oBAAoB;AAErF,OAAM,MAAOC,sBAAuB,SAAQL,oBAAoB;EAO9DM,YAAYC,EAAkF;QAAlF;QAAEC;MAAQ,IAAAD,EAAwE;MAAtEE,EAAA,GAAAF,EAAA,CAAAG,UAAsC;MAAtC;QAAcC;MAAO,IAAAF,EAAiB;MAAZC,UAAU,GAAAE,MAAA,CAAAH,EAAA,EAAxB,WAA0B,CAAF;IAC1D,KAAK,EAAE;IAHD,KAAAI,MAAM,GAAkB,IAAI;IA4E3B,KAAAC,gBAAgB,GAAG,IAAI;IAxE9B,IAAI,CAACN,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACK,YAAY,GAAG,IAAIpB,YAAY,CAAC;MACnCqB,GAAG,EAAEL,OAAO;MACZH,QAAQ;MACRE;KACD,CAAC;IAEF,MAAMO,UAAU,GAAGxB,cAAc,EAAE;IACnC,IAAIwB,UAAU,EAAE;MACd,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACK,UAAU,CAACD,UAAU,CAAC;IAC3C;EACF;EAEO,MAAME,OAAOA,CAAIC,IAAsB;IAC5C,IAAI;MACFjB,+BAA+B,CAACiB,IAAI,CAAC;MACrC,IAAI,CAAC,IAAI,CAACP,MAAM,EAAE;QAChB,QAAQO,IAAI,CAACC,MAAM;UACjB,KAAK,qBAAqB;YAAE;cAC1B,MAAMJ,UAAU,GAAG,MAAM,IAAI,CAACK,sBAAsB,CAACF,IAAI,CAAC;cAC1D,MAAMP,MAAM,GAAG,IAAI,CAACK,UAAU,CAACD,UAAU,CAAC;cAC1C,MAAMJ,MAAM,CAACU,SAAS,CAACH,IAAI,CAAC;cAC5B,IAAI,CAACP,MAAM,GAAGA,MAAM;cACpBnB,eAAe,CAACuB,UAAU,CAAC;cAC3B;YACF;UACA,KAAK,kBAAkB;YAAE;cACvB,MAAMO,eAAe,GAAG,IAAI,CAACN,UAAU,CAAC,KAAK,CAAC;cAC9C,MAAMM,eAAe,CAACD,SAAS,CAAC;gBAAEF,MAAM,EAAE;cAAW,CAAE,CAAC,CAAC,CAAC;cAC1D,MAAMI,MAAM,GAAG,MAAMD,eAAe,CAACL,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;cACpD,MAAMI,eAAe,CAACE,OAAO,EAAE,CAAC,CAAC;cACjC,OAAOD,MAAW;YACpB;UACA,KAAK,uBAAuB;YAC1B,OAAOrB,eAAe,CAACgB,IAAI,EAAExB,iBAAiB,CAAC;UACjD,KAAK,aAAa;YAChB,OAAO,CAAM;UAAE;UACjB,KAAK,aAAa;YAChB,OAAOM,mBAAmB,CAAC,CAAC,CAAM;UAAE;UACtC;YAAS;cACP,MAAMJ,cAAc,CAAC6B,QAAQ,CAACC,YAAY,CACxC,sDAAsD,CACvD;YACH;QACF;MACF;MACA,OAAO,MAAM,IAAI,CAACf,MAAM,CAACM,OAAO,CAACC,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd,MAAM;QAAEC;MAAI,CAAE,GAAGD,KAA0B;MAC3C,IAAIC,IAAI,KAAKjC,kBAAkB,CAAC8B,QAAQ,CAACC,YAAY,EAAE,IAAI,CAACG,UAAU,EAAE;MACxE,OAAOC,OAAO,CAACC,MAAM,CAAClC,cAAc,CAAC8B,KAAK,CAAC,CAAC;IAC9C;EACF;EAEA;EACO,MAAMK,MAAMA,CAAA;IACjBC,OAAO,CAACC,IAAI,CACV,gGAAgG,CACjG;IACD,OAAO,MAAM,IAAI,CAACjB,OAAO,CAAC;MACxBE,MAAM,EAAE;KACT,CAAC;EACJ;EAEA,MAAMU,UAAUA,CAAA;;IACd,OAAM,CAAAxB,EAAA,OAAI,CAACM,MAAM,cAAAN,EAAA,uBAAAA,EAAA,CAAEmB,OAAO,EAAE;IAC5B,IAAI,CAACb,MAAM,GAAG,IAAI;IAClBZ,kBAAkB,CAACoC,QAAQ,EAAE;IAC7B,IAAI,CAACC,IAAI,CAAC,YAAY,EAAExC,cAAc,CAAC6B,QAAQ,CAACY,YAAY,CAAC,8BAA8B,CAAC,CAAC;EAC/F;EAIQjB,sBAAsBA,CAACkB,gBAAkC;IAC/D,OAAOhD,eAAe,CAAC;MACrBuB,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BL,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBgC,gBAAgB;MAChBC,QAAQ,EAAE,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI;KAC9B,CAAC;EACJ;EAEQxB,UAAUA,CAACD,UAAsB;IACvC,OAAO1B,YAAY,CAAC;MAClB0B,UAAU;MACVT,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBO,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/B0B,QAAQ,EAAE,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,IAAI;KAC9B,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}